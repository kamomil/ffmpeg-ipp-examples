diff --git a/ffplay.c b/ffplay.c
index c0b326c..6c29a18 100644
--- a/ffplay.c
+++ b/ffplay.c
@@ -1259,6 +1259,8 @@ static int video_open(VideoState *is)
 {
     int w,h;
 
+    av_log(NULL, AV_LOG_DEBUG, "video_open: dafna in ffplay.c touching input_filename\n");
+
     if (screen_width) {
         w = screen_width;
         h = screen_height;
@@ -2701,6 +2703,7 @@ static int read_thread(void *arg)
     int scan_all_pmts_set = 0;
     int64_t pkt_ts;
 
+    av_log(NULL, AV_LOG_DEBUG, "read_thread: dafna\n");
     if (!wait_mutex) {
         av_log(NULL, AV_LOG_FATAL, "SDL_CreateMutex(): %s\n", SDL_GetError());
         ret = AVERROR(ENOMEM);
@@ -2749,8 +2752,11 @@ static int read_thread(void *arg)
     opts = setup_find_stream_info_opts(ic, codec_opts);
     orig_nb_streams = ic->nb_streams;
 
+    av_log(NULL, AV_LOG_DEBUG,"read_thread: dafna: about to call avformat_find_stream_info\n");
+    
     err = avformat_find_stream_info(ic, opts);
 
+    av_log(NULL, AV_LOG_DEBUG,"read_thread: dafna: returned from avformat_find_stream_info\n");
     for (i = 0; i < orig_nb_streams; i++)
         av_dict_free(&opts[i]);
     av_freep(&opts);
@@ -2790,9 +2796,11 @@ static int read_thread(void *arg)
 
     is->realtime = is_realtime(ic);
 
-    if (show_status)
+    if (show_status){
+      av_log(NULL, AV_LOG_DEBUG,"read_thread: dafna: call av_dump_format\n");
         av_dump_format(ic, 0, is->filename, 0);
 
+    }
     for (i = 0; i < ic->nb_streams; i++) {
         AVStream *st = ic->streams[i];
         enum AVMediaType type = st->codecpar->codec_type;
@@ -2827,6 +2835,8 @@ static int read_thread(void *arg)
                                  st_index[AVMEDIA_TYPE_VIDEO]),
                                 NULL, 0);
 
+    av_log(NULL, AV_LOG_DEBUG,"read_thread: dafna: returned from av_find_best_stream\n");
+    
     is->show_mode = show_mode;
     if (st_index[AVMEDIA_TYPE_VIDEO] >= 0) {
         AVStream *st = ic->streams[st_index[AVMEDIA_TYPE_VIDEO]];
@@ -2862,6 +2872,8 @@ static int read_thread(void *arg)
     if (infinite_buffer < 0 && is->realtime)
         infinite_buffer = 1;
 
+    av_log(NULL, AV_LOG_DEBUG,"read_thread: dafna: about to iterate for(;;) this is the loop that runs the video, till now it was just parsing\n");
+    //return 0;
     for (;;) {
         if (is->abort_request)
             break;
@@ -2990,6 +3002,8 @@ static int read_thread(void *arg)
             av_packet_unref(pkt);
         }
     }
+    av_log(NULL, AV_LOG_DEBUG,"read_thread: dafna: returned from iterate for(;;)\n");
+    
 
     ret = 0;
  fail:
@@ -3011,6 +3025,8 @@ static VideoState *stream_open(const char *filename, AVInputFormat *iformat)
 {
     VideoState *is;
 
+    av_log(NULL, AV_LOG_DEBUG, "stream_open: dafna start\n");
+    
     is = av_mallocz(sizeof(VideoState));
     if (!is)
         return NULL;
@@ -3059,6 +3075,7 @@ fail:
         stream_close(is);
         return NULL;
     }
+    av_log(NULL, AV_LOG_DEBUG, "stream_open: dafna return\n");
     return is;
 }
 
@@ -3424,6 +3441,7 @@ static int opt_height(void *optctx, const char *opt, const char *arg)
 
 static int opt_format(void *optctx, const char *opt, const char *arg)
 {
+    av_log(NULL, AV_LOG_DEBUG, "opt_format: dafna , in ffplay.c touching file_iformat\n");
     file_iformat = av_find_input_format(arg);
     if (!file_iformat) {
         av_log(NULL, AV_LOG_FATAL, "Unknown input format: %s\n", arg);
@@ -3689,15 +3707,20 @@ int main(int argc, char **argv)
         do_exit(NULL);
     }
 
-    av_init_packet(&flush_pkt);
+    av_init_packet(&flush_pkt); //AVPacket type
     flush_pkt.data = (uint8_t *)&flush_pkt;
+    
+    av_log(NULL, AV_LOG_DEBUG, "main: dafna , in ffplay.c touching file_iformat\n");
 
+    //this creats the read_thread which read the header and then it has a huge for(;;) that runs the vido
     is = stream_open(input_filename, file_iformat);
     if (!is) {
         av_log(NULL, AV_LOG_FATAL, "Failed to initialize VideoState!\n");
         do_exit(NULL);
     }
-
+   
+    av_log(NULL, AV_LOG_DEBUG, "main: dafna before event_loop\n");
+    //return 0;
     event_loop(is);
 
     /* never returns */
diff --git a/libavcodec/decode.c b/libavcodec/decode.c
index 584d9d6..28d4bef 100644
--- a/libavcodec/decode.c
+++ b/libavcodec/decode.c
@@ -373,6 +373,8 @@ static int decode_simple_internal(AVCodecContext *avctx, AVFrame *frame)
     int got_frame, actual_got_frame, did_split;
     int ret;
 
+    av_log(avctx, AV_LOG_DEBUG, "decode_simple_internal: dafna\n");
+
     if (!pkt->data && !avci->draining) {
         av_packet_unref(pkt);
         ret = ff_decode_get_packet(avctx, pkt);
@@ -466,7 +468,8 @@ FF_ENABLE_DEPRECATION_WARNINGS
         if(side && side_size>=10) {
             avctx->internal->skip_samples = AV_RL32(side) * avctx->internal->skip_samples_multiplier;
             discard_padding = AV_RL32(side + 4);
-            av_log(avctx, AV_LOG_DEBUG, "skip %d / discard %d samples due to side data\n",
+            av_log(avctx, AV_LOG_DEBUG, "decode_simple_internal: dafna\n");
+            av_log(avctx, AV_LOG_DEBUG, "skip %d / discard %d samples due  side data\n",
                    avctx->internal->skip_samples, (int)discard_padding);
             skip_reason = AV_RL8(side + 8);
             discard_reason = AV_RL8(side + 9);
@@ -646,7 +649,9 @@ static int decode_receive_frame_internal(AVCodecContext *avctx, AVFrame *frame)
 int attribute_align_arg avcodec_send_packet(AVCodecContext *avctx, const AVPacket *avpkt)
 {
     AVCodecInternal *avci = avctx->internal;
-    int ret;
+       int ret;
+
+     av_log(avctx, AV_LOG_DEBUG, "avcodec_send_packet: dafna\n");
 
     if (!avcodec_is_open(avctx) || !av_codec_is_decoder(avctx->codec))
         return AVERROR(EINVAL);
@@ -835,7 +840,7 @@ static int compat_decode(AVCodecContext *avctx, AVFrame *frame,
 {
     AVCodecInternal *avci = avctx->internal;
     int ret = 0;
-
+av_log(avctx, AV_LOG_DEBUG, "compat_decode: dafna\n");
     av_assert0(avci->compat_decode_consumed == 0);
 
     *got_frame = 0;
diff --git a/libavformat/internal.h b/libavformat/internal.h
index c856945..61894db 100644
--- a/libavformat/internal.h
+++ b/libavformat/internal.h
@@ -38,7 +38,8 @@
 #ifdef DEBUG
 #    define hex_dump_debug(class, buf, size) av_hex_dump_log(class, AV_LOG_DEBUG, buf, size)
 #else
-#    define hex_dump_debug(class, buf, size) do { if (0) av_hex_dump_log(class, AV_LOG_DEBUG, buf, size); } while(0)
+//#    define hex_dump_debug(class, buf, size) do { if (0) av_hex_dump_log(class, AV_LOG_DEBUG, buf, size); } while(0)
+#    define hex_dump_debug(class, buf, size) av_hex_dump_log(class, AV_LOG_DEBUG, buf, size)
 #endif
 
 typedef struct AVCodecTag {
diff --git a/libavformat/mov.c b/libavformat/mov.c
index 3845e63..b33dcbc 100644
--- a/libavformat/mov.c
+++ b/libavformat/mov.c
@@ -2719,6 +2719,7 @@ static int mov_read_ctts(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     avio_rb24(pb); /* flags */
     entries = avio_rb32(pb);
 
+    av_log(c->fc, AV_LOG_TRACE, "mov_read_ctts: dafna start\n");
     av_log(c->fc, AV_LOG_TRACE, "track[%u].ctts.entries = %u\n", c->fc->nb_streams - 1, entries);
 
     if (!entries)
@@ -3318,11 +3319,15 @@ static void mov_build_index(MOVContext *mov, AVStream *st)
     unsigned int i, j;
     uint64_t stream_size = 0;
 
+    av_log(mov->fc, AV_LOG_DEBUG, "dafna starting mov_build_index st=%p\n",st);
+    
     if (sc->elst_count) {
+
         int i, edit_start_index = 0, multiple_edits = 0;
         int64_t empty_duration = 0; // empty duration of the first edit list entry
         int64_t start_time = 0; // start time of the media
-
+	av_log(mov->fc, AV_LOG_DEBUG, "dafna in mov_build_index in sc->elst_count=%d\n",sc->elst_count);
+      
         for (i = 0; i < sc->elst_count; i++) {
             const MOVElst *e = &sc->elst_data[i];
             if (i == 0 && e->time == -1) {
@@ -3370,6 +3375,8 @@ static void mov_build_index(MOVContext *mov, AVStream *st)
         int rap_group_present = sc->rap_group_count && sc->rap_group;
         int key_off = (sc->keyframe_count && sc->keyframes[0] > 0) || (sc->stps_count && sc->stps_data[0] > 0);
 
+	av_log(mov->fc, AV_LOG_DEBUG, "dafna in mov_build_index only use old uncompressed audio chunk demuxing when stts specifies it \n");
+	
         current_dts -= sc->dts_shift;
         last_dts     = current_dts;
 
@@ -3392,6 +3399,7 @@ static void mov_build_index(MOVContext *mov, AVStream *st)
                 i + 1 == sc->stsc_data[stsc_index + 1].first)
                 stsc_index++;
 
+	    av_log(mov->fc, AV_LOG_DEBUG, "dafna in mov_build_index in for(i<sc->chunk_count) i=%d\n",i);
             if (next_offset > current_offset && sc->sample_size>0 && sc->sample_size < sc->stsz_sample_size &&
                 sc->stsc_data[stsc_index].count * (int64_t)sc->stsz_sample_size > next_offset - current_offset) {
                 av_log(mov->fc, AV_LOG_WARNING, "STSZ sample size %d invalid (too large), ignoring\n", sc->stsz_sample_size);
@@ -3589,6 +3597,7 @@ static void mov_build_index(MOVContext *mov, AVStream *st)
 
     if (!mov->ignore_editlist && mov->advanced_editlist) {
         // Fix index according to edit lists.
+      av_log(mov->fc, AV_LOG_DEBUG, "mov_build_index: dafna: about to call mov_fix_index\n");
         mov_fix_index(mov, st);
     }
 }
@@ -3710,7 +3719,11 @@ static int mov_read_trak(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     MOVStreamContext *sc;
     int ret;
 
+    av_log(c->fc, AV_LOG_DEBUG, "dafna: starting mov_read_track\n");
+
+    //alocates st and put it in c->fc->streams[s->nb_streams++] = st;
     st = avformat_new_stream(c->fc, NULL);
+    av_log(c->fc, AV_LOG_DEBUG, "dafna: starting mov_read_track AVStream st=%p\n",st);
     if (!st) return AVERROR(ENOMEM);
     st->id = c->fc->nb_streams;
     sc = av_mallocz(sizeof(MOVStreamContext));
@@ -3738,10 +3751,12 @@ static int mov_read_trak(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 
     avpriv_set_pts_info(st, 64, 1, sc->time_scale);
 
+    av_log(c->fc, AV_LOG_DEBUG, "mov_read_track: dafna: about to call mov_build_index\n");
     mov_build_index(c, st);
 
     if (sc->dref_id-1 < sc->drefs_count && sc->drefs[sc->dref_id-1].path) {
         MOVDref *dref = &sc->drefs[sc->dref_id - 1];
+	av_log(c->fc, AV_LOG_DEBUG, "mov_read_track: dafna: if 1\n");
         if (c->enable_drefs) {
             if (mov_open_dref(c, &sc->pb, c->fc->filename, dref) < 0)
                 av_log(c->fc, AV_LOG_ERROR,
@@ -3759,6 +3774,7 @@ static int mov_read_trak(MOVContext *c, AVIOContext *pb, MOVAtom atom)
                    dref->volume, dref->nlvl_from, dref->nlvl_to);
         }
     } else {
+      	av_log(c->fc, AV_LOG_DEBUG, "mov_read_track: dafna: if 2\n");
         sc->pb = c->fc->pb;
         sc->pb_is_copied = 1;
     }
@@ -3817,6 +3833,7 @@ static int mov_read_trak(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     av_freep(&sc->elst_data);
     av_freep(&sc->rap_group);
 
+    av_log(c->fc, AV_LOG_DEBUG, "mov_read_track dafna: returning st=%p\n",st);
     return 0;
 }
 
@@ -5491,6 +5508,11 @@ static int mov_read_default(MOVContext *c, AVIOContext *pb, MOVAtom atom)
         av_log(c->fc, AV_LOG_ERROR, "Atoms too deeply nested\n");
         return AVERROR_INVALIDDATA;
     }
+    av_log(c->fc, AV_LOG_DEBUG, "mov_read_default: dafna start\n");
+    av_log(c->fc, AV_LOG_DEBUG, "mov_read_default: dafna: pb->buf_ptr=%p points to start reading the file\n",pb->buf_ptr);
+    av_log(c->fc, AV_LOG_DEBUG, "mov_read_default: dafna: pb->buf_end=%p points end of buf, length=%ld\n",pb->buf_end,pb->buf_end-pb->buf_ptr);  
+    //hex_dump_debug(NULL,pb->buf_ptr,pb->buf_end-pb->buf_ptr);
+    //hex_dump_debug(NULL,pb->buf_ptr,pb->buf_end-pb->buf_ptr);
     c->atom_depth ++;
 
     if (atom.size < 0)
@@ -5599,6 +5621,7 @@ static int mov_read_default(MOVContext *c, AVIOContext *pb, MOVAtom atom)
         avio_skip(pb, atom.size - total_size);
 
     c->atom_depth --;
+    av_log(c->fc, AV_LOG_DEBUG, "mov_read_default: dafna: returning from func pb->buf_ptr=%p\n",pb->buf_ptr);
     return 0;
 }
 
@@ -6082,6 +6105,7 @@ static int mov_read_header(AVFormatContext *s)
     MOVAtom atom = { AV_RL32("root") };
     int i;
 
+    av_log(s, AV_LOG_DEBUG, "mov_read_header: dafna: start\n");
     if (mov->decryption_key_len != 0 && mov->decryption_key_len != AES_CTR_KEY_SIZE) {
         av_log(s, AV_LOG_ERROR, "Invalid decryption key len %d expected %d\n",
             mov->decryption_key_len, AES_CTR_KEY_SIZE);
@@ -6111,9 +6135,11 @@ static int mov_read_header(AVFormatContext *s)
         mov_read_close(s);
         return AVERROR_INVALIDDATA;
     }
+    av_log(s, AV_LOG_DEBUG, "mov_read_header: dafna \n");
     av_log(mov->fc, AV_LOG_TRACE, "on_parse_exit_offset=%"PRId64"\n", avio_tell(pb));
 
     if (pb->seekable & AVIO_SEEKABLE_NORMAL) {
+      av_log(s, AV_LOG_DEBUG, "mov_read_header: dafna pb->seekable & AVIO_SEEKABLE_NORMAL, s->nb_streams=%d\n",s->nb_streams);
         if (mov->nb_chapter_tracks > 0 && !mov->ignore_chapters)
             mov_read_chapters(s);
         for (i = 0; i < s->nb_streams; i++)
@@ -6125,6 +6151,7 @@ static int mov_read_header(AVFormatContext *s)
     }
 
     /* copy timecode metadata from tmcd tracks to the related video streams */
+    av_log(s, AV_LOG_DEBUG, "mov_read_header:  dafna about to iterate s->nb_streams=%d #1\n",s->nb_streams);
     for (i = 0; i < s->nb_streams; i++) {
         AVStream *st = s->streams[i];
         MOVStreamContext *sc = st->priv_data;
@@ -6145,6 +6172,7 @@ static int mov_read_header(AVFormatContext *s)
     }
     export_orphan_timecode(s);
 
+    av_log(s, AV_LOG_DEBUG, "mov_read_header:  dafna about to iterate s->nb_streams=%d #2\n",s->nb_streams);
     for (i = 0; i < s->nb_streams; i++) {
         AVStream *st = s->streams[i];
         MOVStreamContext *sc = st->priv_data;
@@ -6175,6 +6203,7 @@ static int mov_read_header(AVFormatContext *s)
     }
 
     if (mov->trex_data) {
+      av_log(s, AV_LOG_DEBUG, "mov_read_header:  dafna about to iterate s->nb_streams=%d #3\n",s->nb_streams);
         for (i = 0; i < s->nb_streams; i++) {
             AVStream *st = s->streams[i];
             MOVStreamContext *sc = st->priv_data;
@@ -6191,6 +6220,7 @@ static int mov_read_header(AVFormatContext *s)
     }
 
     if (mov->use_mfra_for > 0) {
+      av_log(s, AV_LOG_DEBUG, "mov_read_header:  dafna about to iterate s->nb_streams=%d #4\n",s->nb_streams);
         for (i = 0; i < s->nb_streams; i++) {
             AVStream *st = s->streams[i];
             MOVStreamContext *sc = st->priv_data;
@@ -6215,6 +6245,7 @@ static int mov_read_header(AVFormatContext *s)
 
     ff_rfps_calculate(s);
 
+    av_log(s, AV_LOG_DEBUG, "mov_read_header:  dafna about to iterate s->nb_streams=%d #5\n",s->nb_streams);
     for (i = 0; i < s->nb_streams; i++) {
         AVStream *st = s->streams[i];
         MOVStreamContext *sc = st->priv_data;
@@ -6276,7 +6307,7 @@ static int mov_read_header(AVFormatContext *s)
         }
     }
     ff_configure_buffers_for_index(s, AV_TIME_BASE);
-
+    av_log(s, AV_LOG_DEBUG, "mov_read_header:  dafna: returning1\n");
     return 0;
 }
 
diff --git a/libavformat/options.c b/libavformat/options.c
index 9371c72..2b867b5 100644
--- a/libavformat/options.c
+++ b/libavformat/options.c
@@ -112,6 +112,7 @@ static int io_open_default(AVFormatContext *s, AVIOContext **pb,
     } else
         loglevel = AV_LOG_INFO;
 
+    av_log(s, loglevel, "io_open_default: dafna\n");
     av_log(s, loglevel, "Opening \'%s\' for %s\n", url, flags & AVIO_FLAG_WRITE ? "writing" : "reading");
 
 #if FF_API_OLD_OPEN_CALLBACKS
@@ -131,6 +132,7 @@ static void io_close_default(AVFormatContext *s, AVIOContext *pb)
 
 static void avformat_get_context_defaults(AVFormatContext *s)
 {
+  av_log(s, loglevel, "avformat_get_context_defaults: dafna\n");
     memset(s, 0, sizeof(AVFormatContext));
 
     s->av_class = &av_format_context_class;
@@ -144,6 +146,7 @@ static void avformat_get_context_defaults(AVFormatContext *s)
 AVFormatContext *avformat_alloc_context(void)
 {
     AVFormatContext *ic;
+    av_log(s, loglevel, "avformat_alloc_context: dafna\n");
     ic = av_malloc(sizeof(AVFormatContext));
     if (!ic) return ic;
     avformat_get_context_defaults(ic);
diff --git a/libavformat/utils.c b/libavformat/utils.c
index c97d248..039c275 100644
--- a/libavformat/utils.c
+++ b/libavformat/utils.c
@@ -378,10 +378,13 @@ int av_demuxer_open(AVFormatContext *ic) {
         return AVERROR(EINVAL);
     }
 
+    
     if (ic->iformat->read_header) {
+      av_log(ic, AV_LOG_DEBUG, "av_demuxer_open: dafna: about to call ic->iformat->read_header\n");
         err = ic->iformat->read_header(ic);
         if (err < 0)
             return err;
+	av_log(ic, AV_LOG_DEBUG, "av_demuxer_open: dafna: returned from call ic->iformat->read_header\n");
     }
 
     if (ic->pb && !ic->internal->data_offset)
@@ -510,7 +513,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
 int avformat_open_input(AVFormatContext **ps, const char *filename,
                         AVInputFormat *fmt, AVDictionary **options)
 {
-    AVFormatContext *s = *ps;
+  AVFormatContext *s = *ps;
     int i, ret = 0;
     AVDictionary *tmp = NULL;
     ID3v2ExtraMeta *id3v2_extra_meta = NULL;
@@ -590,11 +593,12 @@ int avformat_open_input(AVFormatContext **ps, const char *filename,
     if (s->pb)
         ff_id3v2_read_dict(s->pb, &s->internal->id3v2_meta, ID3v2_DEFAULT_MAGIC, &id3v2_extra_meta);
 
-
+    av_log(s, AV_LOG_DEBUG, "avformat_open_input: dafna: maybe call s->iformat->read_header(s))\n");
     if (!(s->flags&AVFMT_FLAG_PRIV_OPT) && s->iformat->read_header)
         if ((ret = s->iformat->read_header(s)) < 0)
             goto fail;
 
+    av_log(s, AV_LOG_DEBUG, "avformat_open_input: dafna: returned from s->iformat->read_header(s))\n");
     if (!s->metadata) {
         s->metadata = s->internal->id3v2_meta;
         s->internal->id3v2_meta = NULL;
@@ -636,6 +640,7 @@ int avformat_open_input(AVFormatContext **ps, const char *filename,
         *options = tmp;
     }
     *ps = s;
+    av_log(s, AV_LOG_DEBUG, "avformat_open_input: dafna: returning\n");
     return 0;
 
 fail:
@@ -3526,9 +3531,10 @@ int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options)
     }
 
     if (ic->pb)
-        av_log(ic, AV_LOG_DEBUG, "Before avformat_find_stream_info() pos: %"PRId64" bytes read:%"PRId64" seeks:%d nb_streams:%d\n",
+        av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: pos: %"PRId64" bytes read:%"PRId64" seeks:%d nb_streams:%d\n",
                avio_tell(ic->pb), ic->pb->bytes_read, ic->pb->seek_count, ic->nb_streams);
-
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate ic->nb_streams=%d #1\n",ic->nb_streams);
+	
     for (i = 0; i < ic->nb_streams; i++) {
         const AVCodec *codec;
         AVDictionary *thread_opt = NULL;
@@ -3605,7 +3611,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
         if (!options)
             av_dict_free(&thread_opt);
     }
-
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate ic->nb_streams=%d #2\n",ic->nb_streams);
     for (i = 0; i < ic->nb_streams; i++) {
 #if FF_API_R_FRAME_RATE
         ic->streams[i]->info->last_dts = AV_NOPTS_VALUE;
@@ -3613,7 +3619,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
         ic->streams[i]->info->fps_first_dts = AV_NOPTS_VALUE;
         ic->streams[i]->info->fps_last_dts  = AV_NOPTS_VALUE;
     }
-
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate for(;;) #1\n",ic->nb_streams);
     read_size = 0;
     for (;;) {
         int analyzed_all_streams;
@@ -3827,6 +3833,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
         st->codec_info_nb_frames++;
         count++;
     }
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: returned from iter ic->nb_streams=%d #1\n",ic->nb_streams);
 
     if (eof_reached) {
         int stream_index;
@@ -3878,7 +3885,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
             }
         }
     }
-
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate ic->nb_streams=%d #3\n",ic->nb_streams);
     // close codecs which were opened in try_decode_frame()
     for (i = 0; i < ic->nb_streams; i++) {
         st = ic->streams[i];
@@ -3886,7 +3893,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
     }
 
     ff_rfps_calculate(ic);
-
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate ic->nb_streams=%d #4\n",ic->nb_streams);
     for (i = 0; i < ic->nb_streams; i++) {
         st = ic->streams[i];
         avctx = st->internal->avctx;
@@ -3977,6 +3984,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
     if (ret >= 0 && ic->nb_streams)
         /* We could not have all the codec parameters before EOF. */
         ret = -1;
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate ic->nb_streams=%d #5\n",ic->nb_streams);
     for (i = 0; i < ic->nb_streams; i++) {
         const char *errmsg;
         st = ic->streams[i];
@@ -4004,6 +4012,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
 
     compute_chapters_end(ic);
 
+    av_log(ic, AV_LOG_DEBUG, "avformat_find_stream_info: dafna: about to iterate ic->nb_streams=%d #6\n",ic->nb_streams);
     /* update the stream parameters from the internal codec contexts */
     for (i = 0; i < ic->nb_streams; i++) {
         st = ic->streams[i];
